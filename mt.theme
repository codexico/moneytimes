<?php

use Drupal\Component\Utility\Unicode;

/**
 * Implements hook_preprocess_html().
 */
function mt_preprocess_html(&$variables) {
    // add to classes
    $variables['attributes']['class'][] = 'mt';
}

function mt_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    // Add content type suggestions.
    if ($node = \Drupal::request()->attributes->get('node')) {
        array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
    }
}


/**
 * Prepares variables for username templates.
 *
 * Default template: username.html.twig.
 *
 * Modules that make any changes to variables like 'name' or 'extra' must ensure
 * that the final string is safe.
 *
 * @param array $variables
 *   An associative array containing:
 *   - account: The user account (\Drupal\Core\Session\AccountInterface).
 */
function mt_preprocess_username(&$variables) {
    $account = $variables['account'] ?: new AnonymousUserSession();

    $variables['extra'] = '';
    $variables['uid'] = $account->id();
    if (empty($variables['uid'])) {
        if (theme_get_setting('features.comment_user_verification')) {
            $variables['extra'] = ' (' . t('not verified') . ')';
        }
    }

    // Set the name to a formatted name that is safe for printing and
    // that won't break tables by being too long. Keep an unshortened,
    // unsanitized version, in case other preprocess functions want to implement
    // their own shortening logic or add markup. If they do so, they must ensure
    // that $variables['name'] is safe for printing.
    $name  = $account->getDisplayName();
    $variables['name_raw'] = $account->getUsername();
//    if (Unicode::strlen($name) > 20) {
//        $name = Unicode::truncate($name, 15, FALSE, TRUE);
//        $variables['truncated'] = TRUE;
//    }
//    else {
    $variables['truncated'] = FALSE;
//    }
    $variables['name'] = $name;
    $variables['profile_access'] = \Drupal::currentUser()->hasPermission('access user profiles');

    $external = FALSE;
    // Populate link path and attributes if appropriate.
    if ($variables['uid'] && $variables['profile_access']) {
        // We are linking to a local user.
        $variables['attributes']['title'] = t('View user profile.');
        $variables['link_path'] = 'user/' . $variables['uid'];
    }
    elseif (!empty($account->homepage)) {
        // Like the 'class' attribute, the 'rel' attribute can hold a
        // space-separated set of values, so initialize it as an array to make it
        // easier for other preprocess functions to append to it.
        $variables['attributes']['rel'] = 'nofollow';
        $variables['link_path'] = $account->homepage;
        $variables['homepage'] = $account->homepage;
        $external = TRUE;
    }
    // We have a link path, so we should generate a URL.
    if (isset($variables['link_path'])) {
        if ($external) {
            $variables['attributes']['href'] = Url::fromUri($variables['link_path'], $variables['link_options'])
                ->toString();
        }
        else {
            $variables['attributes']['href'] = Url::fromRoute('entity.user.canonical', array(
                'user' => $variables['uid'],
            ))->toString();
        }
    }
}
